// Package ouser provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package ouser

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// AuthTokenDTO defines model for AuthTokenDTO.
type AuthTokenDTO struct {
	Token *string `json:"token,omitempty"`
}

// UUIDResponse defines model for UUIDResponse.
type UUIDResponse struct {
	Uuid openapi_types.UUID `json:"uuid"`
}

// UserDTO defines model for UserDTO.
type UserDTO struct {
	UUID      *string    `json:"UUID,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Email     *string    `json:"email,omitempty"`
	FullName  *string    `json:"fullName,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// UserLoginRequest defines model for UserLoginRequest.
type UserLoginRequest struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// UserRegisterRequest defines model for UserRegisterRequest.
type UserRegisterRequest struct {
	Email    string  `json:"email"`
	FullName *string `json:"fullName,omitempty"`
	Password string  `json:"password"`
}

// UserUpdateRequest defines model for UserUpdateRequest.
type UserUpdateRequest struct {
	Email    *string `json:"email,omitempty"`
	FullName *string `json:"fullName,omitempty"`
	Password *string `json:"password,omitempty"`
}

// UserUUID defines model for userUUID.
type UserUUID = string

// PostUsersLoginJSONRequestBody defines body for PostUsersLogin for application/json ContentType.
type PostUsersLoginJSONRequestBody = UserLoginRequest

// PostUsersRegisterJSONRequestBody defines body for PostUsersRegister for application/json ContentType.
type PostUsersRegisterJSONRequestBody = UserRegisterRequest

// PutUsersUserUUIDJSONRequestBody defines body for PutUsersUserUUID for application/json ContentType.
type PutUsersUserUUIDJSONRequestBody = UserUpdateRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Аутентификация пользователя
	// (POST /users/login)
	PostUsersLogin(ctx echo.Context) error
	// Регистрация нового пользователя
	// (POST /users/register)
	PostUsersRegister(ctx echo.Context) error
	// Получить профиль пользователя
	// (GET /users/{userUUID})
	GetUsersUserUUID(ctx echo.Context, userUUID UserUUID) error
	// Обновление профиля пользователя
	// (PUT /users/{userUUID})
	PutUsersUserUUID(ctx echo.Context, userUUID UserUUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostUsersLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsersLogin(ctx)
	return err
}

// PostUsersRegister converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersRegister(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsersRegister(ctx)
	return err
}

// GetUsersUserUUID converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersUserUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userUUID" -------------
	var userUUID UserUUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "userUUID", runtime.ParamLocationPath, ctx.Param("userUUID"), &userUUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userUUID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersUserUUID(ctx, userUUID)
	return err
}

// PutUsersUserUUID converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersUserUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userUUID" -------------
	var userUUID UserUUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "userUUID", runtime.ParamLocationPath, ctx.Param("userUUID"), &userUUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userUUID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutUsersUserUUID(ctx, userUUID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/users/login", wrapper.PostUsersLogin)
	router.POST(baseURL+"/users/register", wrapper.PostUsersRegister)
	router.GET(baseURL+"/users/:userUUID", wrapper.GetUsersUserUUID)
	router.PUT(baseURL+"/users/:userUUID", wrapper.PutUsersUserUUID)

}

type PostUsersLoginRequestObject struct {
	Body *PostUsersLoginJSONRequestBody
}

type PostUsersLoginResponseObject interface {
	VisitPostUsersLoginResponse(w http.ResponseWriter) error
}

type PostUsersLogin200JSONResponse AuthTokenDTO

func (response PostUsersLogin200JSONResponse) VisitPostUsersLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersLogin401Response struct {
}

func (response PostUsersLogin401Response) VisitPostUsersLoginResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostUsersRegisterRequestObject struct {
	Body *PostUsersRegisterJSONRequestBody
}

type PostUsersRegisterResponseObject interface {
	VisitPostUsersRegisterResponse(w http.ResponseWriter) error
}

type PostUsersRegister201JSONResponse UUIDResponse

func (response PostUsersRegister201JSONResponse) VisitPostUsersRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersRegister400Response struct {
}

func (response PostUsersRegister400Response) VisitPostUsersRegisterResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetUsersUserUUIDRequestObject struct {
	UserUUID UserUUID `json:"userUUID"`
}

type GetUsersUserUUIDResponseObject interface {
	VisitGetUsersUserUUIDResponse(w http.ResponseWriter) error
}

type GetUsersUserUUID200JSONResponse UserDTO

func (response GetUsersUserUUID200JSONResponse) VisitGetUsersUserUUIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersUserUUID404Response struct {
}

func (response GetUsersUserUUID404Response) VisitGetUsersUserUUIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PutUsersUserUUIDRequestObject struct {
	UserUUID UserUUID `json:"userUUID"`
	Body     *PutUsersUserUUIDJSONRequestBody
}

type PutUsersUserUUIDResponseObject interface {
	VisitPutUsersUserUUIDResponse(w http.ResponseWriter) error
}

type PutUsersUserUUID200JSONResponse UserDTO

func (response PutUsersUserUUID200JSONResponse) VisitPutUsersUserUUIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersUserUUID400Response struct {
}

func (response PutUsersUserUUID400Response) VisitPutUsersUserUUIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Аутентификация пользователя
	// (POST /users/login)
	PostUsersLogin(ctx context.Context, request PostUsersLoginRequestObject) (PostUsersLoginResponseObject, error)
	// Регистрация нового пользователя
	// (POST /users/register)
	PostUsersRegister(ctx context.Context, request PostUsersRegisterRequestObject) (PostUsersRegisterResponseObject, error)
	// Получить профиль пользователя
	// (GET /users/{userUUID})
	GetUsersUserUUID(ctx context.Context, request GetUsersUserUUIDRequestObject) (GetUsersUserUUIDResponseObject, error)
	// Обновление профиля пользователя
	// (PUT /users/{userUUID})
	PutUsersUserUUID(ctx context.Context, request PutUsersUserUUIDRequestObject) (PutUsersUserUUIDResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostUsersLogin operation middleware
func (sh *strictHandler) PostUsersLogin(ctx echo.Context) error {
	var request PostUsersLoginRequestObject

	var body PostUsersLoginJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUsersLogin(ctx.Request().Context(), request.(PostUsersLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUsersLogin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostUsersLoginResponseObject); ok {
		return validResponse.VisitPostUsersLoginResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostUsersRegister operation middleware
func (sh *strictHandler) PostUsersRegister(ctx echo.Context) error {
	var request PostUsersRegisterRequestObject

	var body PostUsersRegisterJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUsersRegister(ctx.Request().Context(), request.(PostUsersRegisterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUsersRegister")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostUsersRegisterResponseObject); ok {
		return validResponse.VisitPostUsersRegisterResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetUsersUserUUID operation middleware
func (sh *strictHandler) GetUsersUserUUID(ctx echo.Context, userUUID UserUUID) error {
	var request GetUsersUserUUIDRequestObject

	request.UserUUID = userUUID

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersUserUUID(ctx.Request().Context(), request.(GetUsersUserUUIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersUserUUID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersUserUUIDResponseObject); ok {
		return validResponse.VisitGetUsersUserUUIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PutUsersUserUUID operation middleware
func (sh *strictHandler) PutUsersUserUUID(ctx echo.Context, userUUID UserUUID) error {
	var request PutUsersUserUUIDRequestObject

	request.UserUUID = userUUID

	var body PutUsersUserUUIDJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutUsersUserUUID(ctx.Request().Context(), request.(PutUsersUserUUIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutUsersUserUUID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutUsersUserUUIDResponseObject); ok {
		return validResponse.VisitPutUsersUserUUIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
