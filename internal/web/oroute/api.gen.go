// Package oroute provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package oroute

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// ReviewCreateRequest defines model for ReviewCreateRequest.
type ReviewCreateRequest struct {
	Comment   *string `json:"comment,omitempty"`
	Rating    int     `json:"rating"`
	RouteUUID string  `json:"routeUUID"`
	UserUUID  string  `json:"userUUID"`
}

// ReviewDTO defines model for ReviewDTO.
type ReviewDTO struct {
	UUID      *string    `json:"UUID,omitempty"`
	Comment   *string    `json:"comment,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Rating    *int       `json:"rating,omitempty"`
	RouteUUID *string    `json:"routeUUID,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	UserUUID  *string    `json:"userUUID,omitempty"`
}

// RouteCreateRequest defines model for RouteCreateRequest.
type RouteCreateRequest struct {
	Coordinates string   `json:"coordinates"`
	Description *string  `json:"description,omitempty"`
	Length      *float32 `json:"length,omitempty"`
	Name        string   `json:"name"`
}

// RouteDTO defines model for RouteDTO.
type RouteDTO struct {
	UUID        *string    `json:"UUID,omitempty"`
	Coordinates *string    `json:"coordinates,omitempty"`
	CreatedAt   *time.Time `json:"createdAt,omitempty"`
	Description *string    `json:"description,omitempty"`
	Length      *float32   `json:"length,omitempty"`
	Name        *string    `json:"name,omitempty"`
	UpdatedAt   *time.Time `json:"updatedAt,omitempty"`
}

// RouteUpdateRequest defines model for RouteUpdateRequest.
type RouteUpdateRequest struct {
	Coordinates *string  `json:"coordinates,omitempty"`
	Description *string  `json:"description,omitempty"`
	Length      *float32 `json:"length,omitempty"`
	Name        *string  `json:"name,omitempty"`
}

// UUIDResponse defines model for UUIDResponse.
type UUIDResponse struct {
	Uuid openapi_types.UUID `json:"uuid"`
}

// VisitCreateRequest defines model for VisitCreateRequest.
type VisitCreateRequest struct {
	RouteId  string  `json:"routeId"`
	UserUUID *string `json:"userUUID,omitempty"`
}

// RouteUUID defines model for routeUUID.
type RouteUUID = string

// GetReviewsParams defines parameters for GetReviews.
type GetReviewsParams struct {
	RouteId string `form:"routeId" json:"routeId"`
}

// GetRoutesParams defines parameters for GetRoutes.
type GetRoutesParams struct {
	Page     *int `form:"page,omitempty" json:"page,omitempty"`
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// PostReviewsJSONRequestBody defines body for PostReviews for application/json ContentType.
type PostReviewsJSONRequestBody = ReviewCreateRequest

// PostRoutesJSONRequestBody defines body for PostRoutes for application/json ContentType.
type PostRoutesJSONRequestBody = RouteCreateRequest

// PutRoutesRouteUUIDJSONRequestBody defines body for PutRoutesRouteUUID for application/json ContentType.
type PutRoutesRouteUUIDJSONRequestBody = RouteUpdateRequest

// PostVisitsJSONRequestBody defines body for PostVisits for application/json ContentType.
type PostVisitsJSONRequestBody = VisitCreateRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Получение агрегированной аналитики для маршрутов
	// (GET /analytics/routes)
	GetAnalyticsRoutes(ctx echo.Context) error
	// Получение списка отзывов для маршрута
	// (GET /reviews)
	GetReviews(ctx echo.Context, params GetReviewsParams) error
	// Добавление отзыва на маршрут
	// (POST /reviews)
	PostReviews(ctx echo.Context) error
	// Получение списка маршрутов
	// (GET /routes)
	GetRoutes(ctx echo.Context, params GetRoutesParams) error
	// Создание нового маршрута (Административная операция)
	// (POST /routes)
	PostRoutes(ctx echo.Context) error
	// Удаление маршрута (soft delete)
	// (DELETE /routes/{routeUUID})
	DeleteRoutesRouteUUID(ctx echo.Context, routeUUID RouteUUID) error
	// Получение информации о маршруте по ID
	// (GET /routes/{routeUUID})
	GetRoutesRouteUUID(ctx echo.Context, routeUUID RouteUUID) error
	// Обновление маршрута (Административная операция)
	// (PUT /routes/{routeUUID})
	PutRoutesRouteUUID(ctx echo.Context, routeUUID RouteUUID) error
	// Регистрация прохождения маршрута пользователем
	// (POST /visits)
	PostVisits(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAnalyticsRoutes converts echo context to params.
func (w *ServerInterfaceWrapper) GetAnalyticsRoutes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAnalyticsRoutes(ctx)
	return err
}

// GetReviews converts echo context to params.
func (w *ServerInterfaceWrapper) GetReviews(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetReviewsParams
	// ------------- Required query parameter "routeId" -------------

	err = runtime.BindQueryParameter("form", true, true, "routeId", ctx.QueryParams(), &params.RouteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter routeId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetReviews(ctx, params)
	return err
}

// PostReviews converts echo context to params.
func (w *ServerInterfaceWrapper) PostReviews(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostReviews(ctx)
	return err
}

// GetRoutes converts echo context to params.
func (w *ServerInterfaceWrapper) GetRoutes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRoutesParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRoutes(ctx, params)
	return err
}

// PostRoutes converts echo context to params.
func (w *ServerInterfaceWrapper) PostRoutes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostRoutes(ctx)
	return err
}

// DeleteRoutesRouteUUID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteRoutesRouteUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "routeUUID" -------------
	var routeUUID RouteUUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "routeUUID", runtime.ParamLocationPath, ctx.Param("routeUUID"), &routeUUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter routeUUID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteRoutesRouteUUID(ctx, routeUUID)
	return err
}

// GetRoutesRouteUUID converts echo context to params.
func (w *ServerInterfaceWrapper) GetRoutesRouteUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "routeUUID" -------------
	var routeUUID RouteUUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "routeUUID", runtime.ParamLocationPath, ctx.Param("routeUUID"), &routeUUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter routeUUID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRoutesRouteUUID(ctx, routeUUID)
	return err
}

// PutRoutesRouteUUID converts echo context to params.
func (w *ServerInterfaceWrapper) PutRoutesRouteUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "routeUUID" -------------
	var routeUUID RouteUUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "routeUUID", runtime.ParamLocationPath, ctx.Param("routeUUID"), &routeUUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter routeUUID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutRoutesRouteUUID(ctx, routeUUID)
	return err
}

// PostVisits converts echo context to params.
func (w *ServerInterfaceWrapper) PostVisits(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostVisits(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/analytics/routes", wrapper.GetAnalyticsRoutes)
	router.GET(baseURL+"/reviews", wrapper.GetReviews)
	router.POST(baseURL+"/reviews", wrapper.PostReviews)
	router.GET(baseURL+"/routes", wrapper.GetRoutes)
	router.POST(baseURL+"/routes", wrapper.PostRoutes)
	router.DELETE(baseURL+"/routes/:routeUUID", wrapper.DeleteRoutesRouteUUID)
	router.GET(baseURL+"/routes/:routeUUID", wrapper.GetRoutesRouteUUID)
	router.PUT(baseURL+"/routes/:routeUUID", wrapper.PutRoutesRouteUUID)
	router.POST(baseURL+"/visits", wrapper.PostVisits)

}

type GetAnalyticsRoutesRequestObject struct {
}

type GetAnalyticsRoutesResponseObject interface {
	VisitGetAnalyticsRoutesResponse(w http.ResponseWriter) error
}

type GetAnalyticsRoutes200JSONResponse map[string]interface{}

func (response GetAnalyticsRoutes200JSONResponse) VisitGetAnalyticsRoutesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetReviewsRequestObject struct {
	Params GetReviewsParams
}

type GetReviewsResponseObject interface {
	VisitGetReviewsResponse(w http.ResponseWriter) error
}

type GetReviews200JSONResponse []ReviewDTO

func (response GetReviews200JSONResponse) VisitGetReviewsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostReviewsRequestObject struct {
	Body *PostReviewsJSONRequestBody
}

type PostReviewsResponseObject interface {
	VisitPostReviewsResponse(w http.ResponseWriter) error
}

type PostReviews201JSONResponse UUIDResponse

func (response PostReviews201JSONResponse) VisitPostReviewsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type GetRoutesRequestObject struct {
	Params GetRoutesParams
}

type GetRoutesResponseObject interface {
	VisitGetRoutesResponse(w http.ResponseWriter) error
}

type GetRoutes200JSONResponse []RouteDTO

func (response GetRoutes200JSONResponse) VisitGetRoutesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostRoutesRequestObject struct {
	Body *PostRoutesJSONRequestBody
}

type PostRoutesResponseObject interface {
	VisitPostRoutesResponse(w http.ResponseWriter) error
}

type PostRoutes201JSONResponse UUIDResponse

func (response PostRoutes201JSONResponse) VisitPostRoutesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRoutesRouteUUIDRequestObject struct {
	RouteUUID RouteUUID `json:"routeUUID"`
}

type DeleteRoutesRouteUUIDResponseObject interface {
	VisitDeleteRoutesRouteUUIDResponse(w http.ResponseWriter) error
}

type DeleteRoutesRouteUUID204Response struct {
}

func (response DeleteRoutesRouteUUID204Response) VisitDeleteRoutesRouteUUIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type GetRoutesRouteUUIDRequestObject struct {
	RouteUUID RouteUUID `json:"routeUUID"`
}

type GetRoutesRouteUUIDResponseObject interface {
	VisitGetRoutesRouteUUIDResponse(w http.ResponseWriter) error
}

type GetRoutesRouteUUID200JSONResponse RouteDTO

func (response GetRoutesRouteUUID200JSONResponse) VisitGetRoutesRouteUUIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRoutesRouteUUID404Response struct {
}

func (response GetRoutesRouteUUID404Response) VisitGetRoutesRouteUUIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PutRoutesRouteUUIDRequestObject struct {
	RouteUUID RouteUUID `json:"routeUUID"`
	Body      *PutRoutesRouteUUIDJSONRequestBody
}

type PutRoutesRouteUUIDResponseObject interface {
	VisitPutRoutesRouteUUIDResponse(w http.ResponseWriter) error
}

type PutRoutesRouteUUID200Response struct {
}

func (response PutRoutesRouteUUID200Response) VisitPutRoutesRouteUUIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostVisitsRequestObject struct {
	Body *PostVisitsJSONRequestBody
}

type PostVisitsResponseObject interface {
	VisitPostVisitsResponse(w http.ResponseWriter) error
}

type PostVisits201JSONResponse UUIDResponse

func (response PostVisits201JSONResponse) VisitPostVisitsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Получение агрегированной аналитики для маршрутов
	// (GET /analytics/routes)
	GetAnalyticsRoutes(ctx context.Context, request GetAnalyticsRoutesRequestObject) (GetAnalyticsRoutesResponseObject, error)
	// Получение списка отзывов для маршрута
	// (GET /reviews)
	GetReviews(ctx context.Context, request GetReviewsRequestObject) (GetReviewsResponseObject, error)
	// Добавление отзыва на маршрут
	// (POST /reviews)
	PostReviews(ctx context.Context, request PostReviewsRequestObject) (PostReviewsResponseObject, error)
	// Получение списка маршрутов
	// (GET /routes)
	GetRoutes(ctx context.Context, request GetRoutesRequestObject) (GetRoutesResponseObject, error)
	// Создание нового маршрута (Административная операция)
	// (POST /routes)
	PostRoutes(ctx context.Context, request PostRoutesRequestObject) (PostRoutesResponseObject, error)
	// Удаление маршрута (soft delete)
	// (DELETE /routes/{routeUUID})
	DeleteRoutesRouteUUID(ctx context.Context, request DeleteRoutesRouteUUIDRequestObject) (DeleteRoutesRouteUUIDResponseObject, error)
	// Получение информации о маршруте по ID
	// (GET /routes/{routeUUID})
	GetRoutesRouteUUID(ctx context.Context, request GetRoutesRouteUUIDRequestObject) (GetRoutesRouteUUIDResponseObject, error)
	// Обновление маршрута (Административная операция)
	// (PUT /routes/{routeUUID})
	PutRoutesRouteUUID(ctx context.Context, request PutRoutesRouteUUIDRequestObject) (PutRoutesRouteUUIDResponseObject, error)
	// Регистрация прохождения маршрута пользователем
	// (POST /visits)
	PostVisits(ctx context.Context, request PostVisitsRequestObject) (PostVisitsResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetAnalyticsRoutes operation middleware
func (sh *strictHandler) GetAnalyticsRoutes(ctx echo.Context) error {
	var request GetAnalyticsRoutesRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAnalyticsRoutes(ctx.Request().Context(), request.(GetAnalyticsRoutesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAnalyticsRoutes")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAnalyticsRoutesResponseObject); ok {
		return validResponse.VisitGetAnalyticsRoutesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetReviews operation middleware
func (sh *strictHandler) GetReviews(ctx echo.Context, params GetReviewsParams) error {
	var request GetReviewsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetReviews(ctx.Request().Context(), request.(GetReviewsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetReviews")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetReviewsResponseObject); ok {
		return validResponse.VisitGetReviewsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostReviews operation middleware
func (sh *strictHandler) PostReviews(ctx echo.Context) error {
	var request PostReviewsRequestObject

	var body PostReviewsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostReviews(ctx.Request().Context(), request.(PostReviewsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostReviews")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostReviewsResponseObject); ok {
		return validResponse.VisitPostReviewsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetRoutes operation middleware
func (sh *strictHandler) GetRoutes(ctx echo.Context, params GetRoutesParams) error {
	var request GetRoutesRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRoutes(ctx.Request().Context(), request.(GetRoutesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRoutes")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetRoutesResponseObject); ok {
		return validResponse.VisitGetRoutesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostRoutes operation middleware
func (sh *strictHandler) PostRoutes(ctx echo.Context) error {
	var request PostRoutesRequestObject

	var body PostRoutesJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostRoutes(ctx.Request().Context(), request.(PostRoutesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostRoutes")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostRoutesResponseObject); ok {
		return validResponse.VisitPostRoutesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteRoutesRouteUUID operation middleware
func (sh *strictHandler) DeleteRoutesRouteUUID(ctx echo.Context, routeUUID RouteUUID) error {
	var request DeleteRoutesRouteUUIDRequestObject

	request.RouteUUID = routeUUID

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteRoutesRouteUUID(ctx.Request().Context(), request.(DeleteRoutesRouteUUIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteRoutesRouteUUID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteRoutesRouteUUIDResponseObject); ok {
		return validResponse.VisitDeleteRoutesRouteUUIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetRoutesRouteUUID operation middleware
func (sh *strictHandler) GetRoutesRouteUUID(ctx echo.Context, routeUUID RouteUUID) error {
	var request GetRoutesRouteUUIDRequestObject

	request.RouteUUID = routeUUID

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRoutesRouteUUID(ctx.Request().Context(), request.(GetRoutesRouteUUIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRoutesRouteUUID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetRoutesRouteUUIDResponseObject); ok {
		return validResponse.VisitGetRoutesRouteUUIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PutRoutesRouteUUID operation middleware
func (sh *strictHandler) PutRoutesRouteUUID(ctx echo.Context, routeUUID RouteUUID) error {
	var request PutRoutesRouteUUIDRequestObject

	request.RouteUUID = routeUUID

	var body PutRoutesRouteUUIDJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutRoutesRouteUUID(ctx.Request().Context(), request.(PutRoutesRouteUUIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutRoutesRouteUUID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutRoutesRouteUUIDResponseObject); ok {
		return validResponse.VisitPutRoutesRouteUUIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostVisits operation middleware
func (sh *strictHandler) PostVisits(ctx echo.Context) error {
	var request PostVisitsRequestObject

	var body PostVisitsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostVisits(ctx.Request().Context(), request.(PostVisitsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostVisits")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostVisitsResponseObject); ok {
		return validResponse.VisitPostVisitsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
